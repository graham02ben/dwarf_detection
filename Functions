# -*- coding: utf-8 -*-
"""
Created on Wed Sep 20 13:28:40 2023

@author: bboyg
"""
import numpy as np
import math as m
from astropy.coordinates import SkyCoord
from astropy import units as u
import pandas as pd
from matplotlib.patches import Polygon
import matplotlib.pyplot as plt
import cv2
from mpl_toolkits.mplot3d import Axes3D
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import time
import pyautogui
import os
from PIL import ImageGrab
#Isochrone probability =============================================================
#Functions to define how likely stars are member candidates
def PCMD(xdata,ydata,isox1,isoy1, isox2, isoy2):
    P_CMD = []
    eta_CMD = 0.3
    for i in range(len(xdata)):
        py = []
        xd1 = (xdata[i] - isox1)**2 
        yd1 = (ydata[i] - isoy1)**2
        py1 = np.sqrt(xd1 + yd1)     #pythagon for first isochrone label
        py.append(np.min(py1))
        xd2 = (xdata[i] - isox2)**2 
        yd2 = (ydata[i] - isoy2)**2
        py2 = np.sqrt(xd2 + yd2)     #pythag for 2nd
        py.append(np.min(py2))
        mini = np.min(py)           #figurinh which one is the smallest                 
        P_cmd = np.exp(-(mini**2)/(2*(eta_CMD**2))) #using the smallest distance to caluclate probability (Charles 2023)
        P_CMD.append(P_cmd)
    return P_CMD

def PCMD_av(xdata,ydata,isox1,isoy1, isox2, isoy2):
    P_CMD_av = []
    eta_CMD = 0.3
    for i in range(len(xdata)):
        py = []
        xd1 = (xdata[i] - isox1)**2 
        yd1 = (ydata[i] - isoy1)**2
        py1 = np.sqrt(xd1 + yd1)
        py.append(np.min(py1))
        xd2 = (xdata[i] - isox2)**2 
        yd2 = (ydata[i] - isoy2)**2
        py2 = np.sqrt(xd2 + yd2)
        py.append(np.min(py2))
        mini = np.min(py)
        P_cmd_av = np.exp(-(mini**2)/(2*(eta_CMD**2)))
        P_CMD_av.append(P_cmd_av)
    return np.sum(P_CMD_av)

#Set up ============================================================================
def setup(xbin, ybin, x, y, size):
    Xob = xbin[x]+size/2    #the centre of the pixel.
    Yob = ybin[y]+size/2
    c_Ob = []
    for i in range(len(Xob)):
        C_Ob = SkyCoord(Xob[i], Yob[i], frame='icrs', unit=(u.deg,u.deg))
        c_Ob.append(C_Ob)
    return c_Ob

#===================================================================================
#Box around isochrone (CM Cuts) ====================================================
def front_to_back(first, second):
    """Join two arrays front to back."""
    return np.append(first, second[::-1])

def box(prob, gmag, rmag, NewIsor, NewIsog, NewIsoR, NewIsoG):
    #creating data frames for the isochrones
    iso4_df = pd.DataFrame() 
    iso3_df = pd.DataFrame()
    isom_df = pd.DataFrame()    
    iso4_df['mag_r'] = NewIsor[prob]
    iso4_df['color_g_r'] = (NewIsog[prob]) - (NewIsor[prob])
    iso3_df['mag_R'] = NewIsoR[prob]
    iso3_df['color_G_R'] = (NewIsoG[prob]) - (NewIsoR[prob])
    isom_df['mag_R'] = NewIsoR[prob]
    isom_df['color_G_R'] = (NewIsoG[prob]) - (NewIsoR[prob])
    #creating mask for around 21 to 25
    r4 = iso4_df['mag_r']
    r4_mask = (r4 > 21) & (r4 < 25)
    r4_mask.sum
    iso4_masked = iso4_df[r4_mask]
    iso4_masked.head()
    r4 = iso4_masked['mag_r']
    left4_color = iso4_masked['color_g_r'] - 0.4 * (r4/28)**5   #from 
    right4_color = iso4_masked['color_g_r'] + 0.8 * (r4/28)**5
    r3 = iso3_df['mag_R']
    r3_mask = (r3 > 21) & (r3 < 25)
    r3_mask.sum
    iso3_masked = iso3_df[r3_mask]
    iso3_masked.head()
    r3 = iso3_masked['mag_R']
    left3_color = iso3_masked['color_G_R'] - 0.4 * (r3/28)**5
    right3_color = iso3_masked['color_G_R'] + 0.8 * (r3/28)**5
    #middle
    rm = isom_df['mag_R']
    rm_mask = (rm > 21) & (rm < 22)
    rm_mask.sum
    isom_masked = isom_df[rm_mask]
    isom_masked.head()
    rm = isom_masked['mag_R']
    leftm_color = isom_masked['color_G_R'] - 0.4 * (rm/28)**5
    rightm_color = isom_masked['color_G_R'] + 0.8 * (rm/28)**5
    #Joinng the polygon together
    color4_loop = front_to_back(left4_color, right4_color)
    mag4_loop = front_to_back(r4,r4)
    color3_loop = front_to_back(left3_color, right3_color)
    mag3_loop = front_to_back(r3,r3)
    colorm_loop = front_to_back(leftm_color, rightm_color)
    magm_loop = front_to_back(rm,rm)
    #putting it into dataframe
    loop4_df = pd.DataFrame()
    loop4_df['color4_loop'] = color4_loop
    loop4_df['mag4_loop'] = mag4_loop
    loop3_df = pd.DataFrame()
    loop3_df['color3_loop'] = color3_loop
    loop3_df['mag3_loop'] = mag3_loop
    loopm_df = pd.DataFrame()
    loopm_df['colorm_loop'] = colorm_loop
    loopm_df['magm_loop'] = magm_loop
    polygon4 = Polygon(loop4_df)
    polygon3 = Polygon(loop3_df)
    polygonm = Polygon(loopm_df)
    points = pd.DataFrame()
    points['color'] = gmag-rmag
    points['mag'] = rmag
    inside4 = polygon4.contains_points(points)
    inside3 = polygon3.contains_points(points)
    insidem = polygonm.contains_points(points)
    inside = inside3 + inside4
    x = gmag[inside] - rmag[inside]
    y = rmag[inside]
    p = PCMD(x,y, iso3_df['color_G_R'], iso3_df['mag_R'], iso4_df['color_g_r'],iso4_df['mag_r'])                                       
    return x, y, p, loop4_df, loop3_df, iso4_df, iso3_df, inside, insidem

#===================================================================================
#Isochrone fitting probability =====================================================
def isochrone(gmag,rmag,isoG,isoR,isog,isor):
    Prob = []
    for i in range(len(isoG)):
        Hey = PCMD_av(gmag-rmag,rmag,isoG[i]-isoR[i],isoR[i],isog[i]-isor[i],isor[i])
        Prob.append(Hey)
    prob = Prob.index(np.max(Prob))
    return prob
#===================================================================================
#Selection cuts in radius
def cuts(c_Obs, immap, radius, radiusout, radiusin):
    select, dselect, distance = [], [], []
    for i in range(len(c_Obs)):
        Distance = immap.separation(c_Obs[i])
        distance.append(Distance)
        Select = distance[i].degree < radius
        select.append(Select)
        Dselect = (distance[i].degree < radiusout) & (distance[i].degree > radiusin)
        dselect.append(Dselect)
    return select, dselect

#Plotting ===========================================================================
def cmd_plot(fig, axs, index, colouR, colour, maG, mag, x, y, colour4, mag4, colour3, mag3, p, fieldg, fieldr, obj, i, oc):
    axs[index].plot(colour4,mag4)
    axs[index].plot(colour3,mag3)
    plt.plot (x,y,'go', markersize=0.5, alpha =0.5)
    axs[index].plot(colour,mag , c = '0.5')
    axs[index].plot(colouR,maG, c = '0.5')
    axs[index].set_xlim(-0.5,2.5)
    axs[index].set_ylim(20,26)
    cs = axs[index].scatter(x, y, marker = 'o', c=p, cmap = 'plasma')
    cbar= fig.colorbar(cs,  label = 'Membership Probability', ax=axs[i-oc])    
    #plot field
    axs[index].scatter(fieldg - fieldr, fieldr, color = 'black', alpha = 0.5)
    #set limits
    axs[index].set_xlim(-0.5,2.5)
    axs[index].set_ylim(20,26)
    #titles
    axs[index].set_title('Object'+str(obj))
    #Object = Object + 1
    axs[index].set_xlabel('g-r (mag)')
    return cbar
    

    
#Matching Coords ====================================================================
def match_coordsg(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,2),round(COORDINATES[i].dec.deg,2)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,2),round(COORDINATESG[i].dec.deg,2)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(S) = Object', j+1, "(G)")

def match_coordssg(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,2),round(COORDINATES[i].dec.deg,2)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,2),round(COORDINATESG[i].dec.deg,2)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(S) = Object', j+1, "(SG)")
                
def match_coordgsg(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,2),round(COORDINATES[i].dec.deg,2)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,2),round(COORDINATESG[i].dec.deg,2)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(G) = Object', j+1, "(SG)")
                
def match_coordst(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,1),round(COORDINATES[i].dec.deg,1)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,1),round(COORDINATESG[i].dec.deg,1)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(S) \u2248 Object', j+1, "(T)")
                
def match_coordgt(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,1),round(COORDINATES[i].dec.deg,1)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,1),round(COORDINATESG[i].dec.deg,1)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(G) \u2248 Object', j+1, "(T)")
                
def match_coordsgt(COORDINATES, COORDINATESG):
    sky_coords = []
    sky_coordsg = []
    for i in range(len(COORDINATES)):
        sky_coords.append([round(COORDINATES[i].ra.deg,1),round(COORDINATES[i].dec.deg,1)])
    for i in range(len(COORDINATESG)):
        sky_coordsg.append([round(COORDINATESG[i].ra.deg,1),round(COORDINATESG[i].dec.deg,1)])
    for i in range(len(sky_coords)):
        for j in range(len(sky_coordsg)):       
            if (sky_coords[i]) == (sky_coordsg[j]):
                print('Object', i+1, '(SG) \u2248 Object', j+1, "(T)")
     
                

# For PAndAS Footprint ==============================================================
def ellipse(ra,rb,ang,x0,y0,Nb=50):
    xpos,ypos=x0,y0
    radm,radn=ra,rb
    an=ang
    co,si=np.cos(an),np.sin(an)
    the=np.linspace(0,2*np.pi,Nb)
    X=radm*np.cos(the)*co-si*radn*np.sin(the)+xpos
    Y=radm*np.cos(the)*si+co*radn*np.sin(the)+ypos
    return X,Y

# DESI SCREENSHOTS ==================================================================
def DESI(ra, dec):
    driver = webdriver.Edge()
    driver.get("https://www.legacysurvey.org/viewer")
    driver.maximize_window()
    time.sleep(2)
    info_tab = driver.find_element(By.XPATH, '/html/body/div/div[2]/div[1]/div[1]')
    time.sleep(1)
    info_tab.click()
    time.sleep(1)
    pyautogui.press('tab')
    time.sleep(1)
    pyautogui.typewrite(str(ra))
    time.sleep(1)
    pyautogui.press('tab')
    time.sleep(1)
    pyautogui.typewrite(str(dec))
    time.sleep(1)
    pyautogui.press('tab')
    time.sleep(1)
    pyautogui.typewrite('13')
    fly = driver.find_element(By.XPATH, '/html/body/div/div[2]/div[1]/div[1]/center/form/input[7]')
    time.sleep(1)
    fly.click()
    for _ in range(32):
        pyautogui.press('tab')
    time.sleep(1)
    for _ in range(3):
        pyautogui.press('right')
    time.sleep(1)
    pyautogui.press('tab')
    time.sleep(1)
    for _ in range(44):
        pyautogui.press('right')
    left = 630
    top = 300
    width = 600
    height = 600
    # Capture the screenshot of the specified area
    screenshot = ImageGrab.grab(bbox=(left, top, left + width, top + height))
    #fig_screenshot = plt.plot(screenshot)
    #plt.axis('off')
    return screenshot # Save the screenshot to a file

#Covolution and Padding =============================================================
#Convolution using a Gaussian ======================================================
def convolution(image, kernel, average=False, verbose=False):
    if len(image.shape) == 3:
        print("Found 3 Channels : {}".format(image.shape))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        print("Converted to Gray Channel. Size : {}".format(image.shape))
    else:
        print("Image Shape : {}".format(image.shape))
 
    print("Kernel Shape : {}".format(kernel.shape))
 
    if verbose:
        plt.imshow(image, cmap='gray')
        plt.title("Image")
        plt.show()
 
    image_row, image_col = image.shape
    kernel_row, kernel_col = kernel.shape
 
    output = np.zeros(image.shape)
 
    pad_height = int((kernel_row - 1) / 2)
    pad_width = int((kernel_col - 1) / 2)
 
    padded_image = np.zeros((image_row + (2 * pad_height), image_col + (2 * pad_width)))
 
    padded_image[pad_height:padded_image.shape[0] - pad_height, pad_width:padded_image.shape[1] - pad_width] = image
 
    if verbose:
        plt.imshow(padded_image, cmap='gray')
        plt.title("Padded Image")
        plt.show()
 
    for row in range(image_row):
        for col in range(image_col):
            output[row, col] = np.sum(kernel * padded_image[row:row + kernel_row, col:col + kernel_col])
            if average:
                output[row, col] /= kernel.shape[0] * kernel.shape[1]
 
    print("Output Image size : {}".format(output.shape))
 
    if verbose:
        plt.imshow(output, cmap='gray')
        plt.title("Output Image using {}X{} Kernel".format(kernel_row, kernel_col))
        plt.show()
 
    return output

def dnorm(x, mu, sd):
    return 1 / (np.sqrt(2 * np.pi) * sd) * np.e ** (-np.power((x - mu) / sd, 2) / 2)


def gaussian_kernel(size, sigma=1, verbose=True):
    kernel_1D = np.linspace(-(size // 2), size // 2, size)
    for i in range(size):
        kernel_1D[i] = dnorm(kernel_1D[i], 0, sigma)
    kernel_2D = np.outer(kernel_1D.T, kernel_1D.T)

    kernel_2D *= 1.0 / kernel_2D.max()
    print(kernel_2D)
    plt.imshow(kernel_2D, interpolation='none', cmap='gray')
    #plt.title("Kernel ( {}X{} )".format(size, size))
    plt.show()
    if verbose:
        plt.imshow(kernel_2D, interpolation='none', cmap='gray')
     #   plt.title("Kernel ( {}X{} )".format(size, size))
        plt.show()
        
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    x = np.arange(0, size)
    y = np.arange(0, size)
    X, Y = np.meshgrid(x, y)

    ax.plot_surface(X, Y, kernel_2D, cmap='viridis')
    plt.show()

    return kernel_2D



    return kernel_2D
def gaussian_blur(image, kernel_size, verbose=False):
    kernel = gaussian_kernel(kernel_size, sigma = m.sqrt(kernel_size), verbose=verbose)
    return convolution(image, kernel, average=True, verbose=verbose)


# if __name__ == '__main__':
#     ap = argparse.ArgumentParser()
#     ap.add_argument("-i", "--image", required=True, help="Path to the image")
#     args = vars(ap.parse_args())

#     image = cv2.imread(args["image"])

#     gaussian_blur(image, 5, verbose=True)
